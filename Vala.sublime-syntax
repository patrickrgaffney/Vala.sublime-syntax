%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
# https://www.vala-project.org/doc/vala/
file_extensions:
  - vala
scope: source.vala

variables:
  # Legal identifiers must begin with one alphabetic character
  # or underscore, followed by any number (zero or more) of
  # alphanumerics or underscores.
  # TODO: Add `@` identifiers: https://wiki.gnome.org/Projects/Vala/Tutorial#Syntax_Overview
  identifier: \b[[:alpha:]_]([[:alnum:]_])*\b

  boolean_type_name: bool
  integer_type_name: char|uchar|short|ushort|int|uint|long|ulong|size_t|ssize_t|int8|uint8|int16|uint16|int32|uint32|int64|uint64|unichar
  float_type_name: float|double
  reference_type_name: string
  builtin_type: '{{boolean_type_name}}|{{integer_type_name}}|{{float_type_name}}|{{reference_type_name}}'

  # Lifted from the characters GLib's string.escape() method will handle.
  string_escape: \\[bfnrtv"]

  access_modifier: public|private

contexts:
  prototype:
    - include: comments

  main:
    - include: keywords
    - include: expressions
    - include: operators
    - include: namespace_declarations

  comments:
    - include: line_comments
    - include: doc_comments
    - include: block_comments

  line_comments:
    - match: //
      scope: punctuation.definition.comment.vala
      push:
        - meta_scope: comment.line.vala
        - match: $\n?
          pop: true

  block_comments:
    - match: /\*
      scope: punctuation.definition.comment.begin.vala
      push:
        - meta_scope: comment.block.vala
        - match: \*/
          scope: punctuation.definition.comment.end.vala
          pop: true

  doc_comments:
    - match: /\*\*
      scope: comment.block.documentation.vala punctuation.definition.comment.begin.vala
      push: documentation

  documentation:
    - meta_include_prototype: false
    - meta_content_scope: comment.block.documentation.vala
    - match: \*/
      scope: comment.block.documentation.vala punctuation.definition.comment.end.vala
      pop: true
    # Force a newline.
    - match: \<\<BR\>\>
      scope: constant.character.escape.vala
    - include: documentation_bold_text
    - include: documentation_italic_text

  documentation_bold_text:
    - match: \'\'
      scope: punctuation.definition.bold.begin.vala
      push:
        - meta_scope: markup.bold.vala
        - match: \'\'
          scope: punctuation.definition.bold.end.vala
          pop: true

  documentation_italic_text:
    - match: \/\/
      scope: punctuation.definition.italic.begin.vala
      push:
        - meta_scope: markup.italic.vala
        - match: \/\/
          scope: punctuation.definition.italic.end.vala
          pop: true

  keywords:
    - include: type_keywords

  expressions:
    - include: language_constants
    - include: number_literals
    - include: strings

  operators:
    - include: semicolon
    # Assignment operators
    - match: (\+=|-=|\*=|/=|%=|\|=|&=|\^=|<<=|>>=)
      scope: keyword.operator.assignment.vala
    # Bitwise-shift operators.
    - match: (<<|>>)
      scope: keyword.operator.bitwise.vala
    # Relational operators
    - match: (==|!=|<=|<|>=|>)
      scope: keyword.operator.comparison.vala
    - match: =
      scope: keyword.operator.assignment.vala
    # Arithmetic operators.
    - match: (\+\+|--|\+|-|\*|\/|%)
      scope: keyword.operator.arithmetic.vala
    # Logical operators.
    - match: (\|\||&&|!)
      scope: keyword.operator.logical.vala
    # Bitwise operators.
    - match: (\||\^|&|~|)
      scope: keyword.operator.bitwise.vala
    # Coalescing operator
    - match: \?\?
      scope: keyword.operator.vala
    # Conditional operators
    - match: (\?|\:)
      scope: keyword.operator.vala

  semicolon:
    - match: ;
      scope: punctuation.terminator.vala

  type_keywords:
    - match: '\b({{builtin_type}})\b'
      scope: storage.type.vala

  language_constants:
    - match: \b(true|false|null)\b
      scope: constant.language.vala

  number_literals:
    - include: float_literals
    - include: integer_literals

  float_literals:
    - match: \b\d+([.])(\d+)\b
      scope: constant.numeric.float.vala
      captures:
        1: punctuation.separator.decimal.vala

  integer_literals:
    - match: \b\d+\b
      scope: constant.numeric.integer.vala

  strings:
    - include: verbatim_strings
    - include: single_line_strings

  single_line_strings:
    - match: '"'
      scope: punctuation.definition.string.begin.vala
      push:
        - meta_scope: string.quoted.double.vala
        - match: '"'
          scope: punctuation.definition.string.end.vala
          pop: true
        - match: '{{string_escape}}'
          scope: constant.character.escape.vala
        - match: $\n?
          set:
            - meta_scope: invalid.illegal.vala
            - match: '"'
              scope: punctuation.definition.string.end.vala
              pop: true

  verbatim_strings:
    - match: '"""'
      scope: punctuation.definition.string.begin.vala
      push:
        - meta_scope: string.quoted.triple.vala
        - match: '"""'
          scope: punctuation.definition.string.end.vala
          pop: true

  namespace_declarations:
    - match: '\b(namespace)\b\s+({{identifier}})'
      captures:
        1: storage.type.vala
        2: entity.name.namespace.vala
      push:
        - meta_scope: meta.namespace.vala
        - match: '{{identifier}}'
          scope: entity.name.namespace.vala
        - match: \.
          scope: punctuation.separator.vala
        - match: \{
          scope: punctuation.section.block.begin.vala
          set:
            - meta_scope: meta.namespace.vala meta.block.vala
            - match: \}
              scope: punctuation.section.block.end.vala
              pop: true
            - include: namespace_members

  namespace_members:
    - include: namespace_declarations
    - include: field_declarations

  field_declarations:
    - match: '\b({{access_modifier}})\b|\b({{builtin_type}})\b|(identifier)'
      captures:
        1: storage.modifier.vala
        2: storage.type.vala
        3: support.type.vala
      push:
        - include: type_keywords
        - match: '{{identifier}}'
          scope: variable.other.readwrite.vala
        - match: =
          scope: keyword.operator.assignment.vala
        - match: \;
          scope: punctuation.terminator.vala
          pop: true
        - include: expressions
