%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
# https://www.vala-project.org/doc/vala/
file_extensions:
  - vala
scope: source.vala

variables:
  # Legal identifiers must begin with one alphabetic character
  # or underscore, followed by any number (zero or more) of
  # alphanumerics or underscores.
  # TODO: Add `@` identifiers: https://wiki.gnome.org/Projects/Vala/Tutorial#Syntax_Overview
  identifiers: \b[[:alpha:]_]([[:alnum:]_])*\b

  boolean_type_names: \b(bool)\b
  integer_type_names: \b(char|uchar|short|ushort|int|uint|long|ulong|size_t|ssize_t|int8|uint8|int16|uint16|int32|uint32|int64|uint64|unichar)\b
  float_type_names: \b(float|double)\b
  reference_type_names: \b(string)\b

  # Lifted from the characters GLib's string.escape() method will handle.
  string_escapes: \\[bfnrtv"]

contexts:
  prototype:
    - include: comments

  main:
    - include: keywords
    - include: expressions
    - include: operators

  comments:
    # TODO: add valadoc syntax: https://valadoc.org/markup.htm
    - include: line_comments
    - include: block_comments

  # Line comments begin with '//' and pop at the EOL.
  line_comments:
    - match: //
      scope: punctuation.definition.comment.vala
      push:
        - meta_scope: comment.line.vala
        - match: $\n?
          pop: true

  # C-Style block comments.
  block_comments:
    - match: /\*
      scope: punctuation.definition.comment.begin.vala
      push:
        - meta_scope: comment.block.vala
        - match: \*/
          scope: punctuation.definition.comment.end.vala
          pop: true

  keywords:
    - include: type_keywords

  expressions:
    - include: language_constants
    - include: number_literals
    - include: strings

  operators:
    # TODO: class/array (`new`) instantiation
    # TODO:
    - include: semicolon
    # Assignment operators
    - match: (\+=|-=|\*=|/=|%=|\|=|&=|\^=|<<=|>>=)
      scope: keyword.operator.assignment.vala
    # Bitwise-shift operators.
    - match: (<<|>>)
      scope: keyword.operator.bitwise.vala
    # Relational operators
    - match: (==|!=|<=|<|>=|>)
      scope: keyword.operator.comparison.vala
    - match: =
      scope: keyword.operator.assignment.vala
    # Arithmetic operators.
    - match: (\+\+|--|\+|-|\*|\/|%)
      scope: keyword.operator.arithmetic.vala
    # Logical operators.
    - match: (\|\||&&|!)
      scope: keyword.operator.logical.vala
    # Bitwise operators.
    - match: (\||\^|&|~|)
      scope: keyword.operator.bitwise.vala
    # Coalescing operator
    - match: \?\?
      scope: keyword.operator.vala
    # Conditional operators
    - match: (\?|\:)
      scope: keyword.operator.vala

  semicolon:
    - match: ;
      scope: punctuation.terminator.vala

  type_keywords:
    - include: boolean_type_keywords
    - include: integer_type_keywords
    - include: float_type_keywords
    - include: reference_type_keywords

  boolean_type_keywords:
    - match: '{{boolean_type_names}}'
      scope: storage.type.vala

  integer_type_keywords:
    - match: '{{integer_type_names}}'
      scope: storage.type.vala

  float_type_keywords:
    - match: '{{float_type_names}}'
      scope: storage.type.vala

  reference_type_keywords:
    - match: '{{reference_type_names}}'
      scope: storage.type.vala

  language_constants:
    - match: \b(true|false|null)\b
      scope: constant.language.vala

  number_literals:
    - include: float_literals
    - include: integer_literals

  float_literals:
    - match: \b\d+([.])(\d+)\b
      scope: constant.numeric.float.vala
      captures:
        1: punctuation.separator.decimal.vala

  integer_literals:
    - match: \b\d+\b
      scope: constant.numeric.integer.vala

  strings:
    # TODO: string templates: @"$a * $b = $(a * b)";
    - include: verbatim_strings
    - include: single_line_strings

  single_line_strings:
    - match: '"'
      scope: punctuation.definition.string.begin.vala
      push:
        - meta_scope: string.quoted.double.vala
        - match: '"'
          scope: punctuation.definition.string.end.vala
          pop: true
        - match: '{{string_escapes}}'
          scope: constant.character.escape.vala
        - match: $\n?
          set:
            - meta_scope: invalid.illegal.vala
            - match: '"'
              scope: punctuation.definition.string.end.vala
              pop: true

  verbatim_strings:
    - match: '"""'
      scope: punctuation.definition.string.begin.vala
      push:
        - meta_scope: string.quoted.triple.vala
        - match: '"""'
          scope: punctuation.definition.string.end.vala
          pop: true