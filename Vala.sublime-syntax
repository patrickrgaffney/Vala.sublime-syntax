%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
# https://www.vala-project.org/doc/vala/
file_extensions:
  - vala
scope: source.vala

variables:
  # Legal identifiers must begin with one alphabetic character
  # or underscore, followed by any number (zero or more) of
  # alphanumerics or underscores.
  # TODO: Add `@` identifiers: https://wiki.gnome.org/Projects/Vala/Tutorial#Syntax_Overview
  identifier: \b[[:alpha:]_](?:[[:alnum:]_])*\b

  # A fully qualified identifier (possibly including namespace).
  namespace_identifier: (?:{{identifier}})(?:\.(?:{{identifier}}))*

  boolean_type_name: bool
  integer_type_name: char|uchar|short|ushort|int|uint|long|ulong|size_t|ssize_t|int8|uint8|int16|uint16|int32|uint32|int64|uint64|unichar
  float_type_name: float|double
  reference_type_name: string
  builtin_type: '{{boolean_type_name}}|{{integer_type_name}}|{{float_type_name}}|{{reference_type_name}}'

  # Lifted from the characters GLib's string.escape() method will handle.
  string_escape: \\[bfnrtv"]

  access_modifier: public|private

contexts:
  prototype:
    - include: comments

  main:
    - include: using_statement
    - include: namespace_declarations
    - include: keywords
    - include: expressions

  comments:
    - include: line_comments
    - include: doc_comments
    - include: block_comments

  line_comments:
    - match: //
      scope: punctuation.definition.comment.vala
      push:
        - meta_scope: comment.line.vala
        - match: $\n?
          pop: true

  block_comments:
    - match: /\*
      scope: punctuation.definition.comment.begin.vala
      push:
        - meta_scope: comment.block.vala
        - match: \*/
          scope: punctuation.definition.comment.end.vala
          pop: true

  doc_comments:
    - match: /\*\*
      scope: comment.block.documentation.vala punctuation.definition.comment.begin.vala
      push: documentation

  documentation:
    - meta_include_prototype: false
    - meta_content_scope: comment.block.documentation.vala
    - match: \*/
      scope: comment.block.documentation.vala punctuation.definition.comment.end.vala
      pop: true
    - include: documentation_block_markup
    - include: documentation_inline_markup

  documentation_inline_markup:
    # Force a newline.
    - match: \<\<BR\>\>
      scope: constant.character.escape.vala
    - include: documentation_bold_text
    - include: documentation_italic_text
    - include: documentation_underline_text
    - include: documentation_blockquote_text
    - include: documentation_link
    - include: documentation_image
    - include: documentation_link_taglet
    - include: documentation_inheritdoc_taglet

  documentation_block_markup:
    - include: documentation_code_block
    - include: documentation_list_block
    - include: documentation_table_block
    - include: documentation_headline_block
    - include: documentation_deprecated_taglet
    - include: documentation_see_taglet
    - include: documentation_param_taglet
    - include: documentation_since_taglet
    - include: documentation_return_taglet
    - include: documentation_throws_taglet

  documentation_list_block:
    - match: ^\s+(?:\*)[ ]{2,}((\d*\.|#|i\.|I\.|a\.|A\.)|(\*))\s+
      captures:
        2: markup.list.numbered.vala
        3: markup.list.unnumbered.vala

  documentation_code_block:
    - match: ^\s+(?:\*)[ ]+({{{)
      captures:
        1: punctuation.section.braces.begin.vala
      push:
        - meta_content_scope: markup.raw.block.vala
        - match: '}}}'
          scope: punctuation.section.braces.end.vala
          pop: true

  documentation_table_block:
    - match: ^\s+(?:\*)[ ]+([|]{2})\s+
      captures:
        1: punctuation.separator.vala
      push:
        - include: documentation_inline_markup
        - match: '[||]'
          scope: punctuation.separator.vala
        - match: $\n?
          pop: true

  documentation_headline_block:
    - match: ^\s+(?:\*)[ ]+(={1,4})\s+
      captures:
        1: punctuation.definition.heading.vala
      push:
        - meta_content_scope: markup.heading.vala
        - match: (={1,4})\s+
          captures:
            1: punctuation.definition.heading.vala
          pop: true

  documentation_bold_text:
    - match: \'\'
      scope: punctuation.definition.bold.begin.vala
      push:
        - meta_scope: markup.bold.vala
        - match: \'\'
          scope: punctuation.definition.bold.end.vala
          pop: true
        - include: documentation_inline_markup

  documentation_italic_text:
    # Force a non-WS character for testing purposes.
    - match: \/\/(?!\s)
      scope: punctuation.definition.italic.begin.vala
      push:
        - meta_scope: markup.italic.vala
        - match: \/\/
          scope: punctuation.definition.italic.end.vala
          pop: true
        - include: documentation_inline_markup

  documentation_underline_text:
    - match: \_\_
      scope: punctuation.definition.underline.begin.vala
      push:
        - meta_scope: markup.underline.vala
        - match: \_\_
          scope: punctuation.definition.underline.end.vala
          pop: true
        - include: documentation_inline_markup

  documentation_blockquote_text:
    - match: \`\`
      scope: punctuation.definition.blockquote.begin.vala
      push:
        - meta_scope: markup.quote.vala
        - match: \`\`
          scope: punctuation.definition.blockquote.end.vala
          pop: true
        - include: documentation_inline_markup

  documentation_link:
    - match: \[\[
      scope: punctuation.section.brackets.begin.vala
      push:
        - match: \|
          scope: punctuation.separator.vala
        - match: \]\]
          scope: punctuation.section.brackets.end.vala
          pop: true

  documentation_image:
    - match: \{\{
      scope: punctuation.section.brackets.begin.vala
      push:
        - match: \|
          scope: punctuation.separator.vala
        - match: \}\}
          scope: punctuation.section.brackets.end.vala
          pop: true

  documentation_link_taglet:
    - match: ({)(@link)\s+({{identifier}})(})
      captures:
        1: punctuation.section.braces.begin.vala
        2: storage.type.vala
        3: entity.name.section.vala
        4: punctuation.section.braces.end.vala

  documentation_inheritdoc_taglet:
    - match: ({)(@inheritDoc)(})
      captures:
        1: punctuation.section.braces.begin.vala
        2: storage.type.vala
        3: punctuation.section.braces.end.vala

  documentation_deprecated_taglet:
    - match: (@deprecated)\s+
      captures:
        1: storage.type.vala

  documentation_see_taglet:
    - match: (@see)\s+({{identifier}})
      captures:
        1: storage.type.vala
        2: entity.name.section.vala

  documentation_param_taglet:
    - match: (@param)\s+({{identifier}})
      captures:
        1: storage.type.vala
        2: variable.parameter.vala

  documentation_since_taglet:
    - match: (@since)\s+
      captures:
        1: storage.type.vala

  documentation_return_taglet:
    - match: (@return)\s+
      captures:
        1: storage.type.vala

  documentation_throws_taglet:
    - match: (@throws)\s+({{identifier}})
      captures:
        1: storage.type.vala
        2: entity.name.type.vala

  keywords:
    - include: type_keywords

  expressions:
    - match: (->)({{identifier}})
      captures:
        1: punctuation.accessor.arrow.vala
        2: variable.other.member.vala
    - include: operators
    - include: language_constants
    - include: number_literals
    - include: strings
    - match: \bthis\b
      scope: variable.language.vala
    - match: ([.])({{identifier}})
      captures:
        1: punctuation.accessor.dot.vala
        2: variable.other.member.vala
    - match: '{{identifier}}'
      scope: variable.other.readwrite.vala

  operators:
    - include: semicolon
    # Ownership transfer.
    - match: ([(])(owned)([)])
      scope: keyword.operator.word.vala
    - include: parens
    - include: brackets
    # Global namespace operator
    - match: 'global::'
      scope: keyword.operator.word.vala
    # Assignment operators
    - match: (\+=|-=|\*=|/=|%=|\|=|&=|\^=|<<=|>>=)
      scope: keyword.operator.assignment.vala
    # Bitwise-shift operators.
    - match: (<<|>>)
      scope: keyword.operator.bitwise.vala
    # Relational operators
    - match: (==|!=|<=|<|>=|>)
      scope: keyword.operator.comparison.vala
    - match: =
      scope: keyword.operator.assignment.vala
    # Arithmetic operators.
    - match: (\+\+|--|\+|-|\*|\/|%)
      scope: keyword.operator.arithmetic.vala
    # Logical operators.
    - match: (\|\||&&|!)
      scope: keyword.operator.logical.vala
    # Bitwise operators.
    - match: (\||\^|&|~|)
      scope: keyword.operator.bitwise.vala
    # Coalescing operator
    - match: \?\?
      scope: keyword.operator.vala
    # Conditional operators
    - match: (\?|\:)
      scope: keyword.operator.vala

  semicolon:
    - match: ;
      scope: punctuation.terminator.vala

  parens:
    - match: \(
      scope: punctuation.section.parens.begin.vala
      push:
        - meta_scope: meta.group.vala
        - include: expressions
        - match: \)
          scope: punctuation.section.parens.end.vala
          pop: true

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.vala
      push:
        - meta_scope: meta.brackets.vala
        - include: expressions
        - match: \,
          scope: punctuation.separator.vala
        - match: \]
          scope: punctuation.section.brackets.end.vala
          pop: true

  type_keywords:
    - match: '\b({{builtin_type}})\b'
      scope: storage.type.vala

  language_constants:
    - match: \b(true|false|null)\b
      scope: constant.language.vala

  number_literals:
    - include: float_literals
    - include: integer_literals

  float_literals:
    - match: \b\d+([.])(\d+)\b
      scope: constant.numeric.float.vala
      captures:
        1: punctuation.separator.decimal.vala

  integer_literals:
    - match: \b\d+\b
      scope: constant.numeric.integer.vala

  strings:
    - include: verbatim_strings
    - include: single_line_strings

  single_line_strings:
    - match: '"'
      scope: punctuation.definition.string.begin.vala
      push:
        - meta_scope: string.quoted.double.vala
        - match: '"'
          scope: punctuation.definition.string.end.vala
          pop: true
        - match: '{{string_escape}}'
          scope: constant.character.escape.vala
        - match: $\n?
          set:
            - meta_scope: invalid.illegal.vala
            - match: '"'
              scope: punctuation.definition.string.end.vala
              pop: true

  verbatim_strings:
    - match: '"""'
      scope: punctuation.definition.string.begin.vala
      push:
        - meta_scope: string.quoted.triple.vala
        - match: '"""'
          scope: punctuation.definition.string.end.vala
          pop: true

  namespace_declarations:
    - match: '\b(namespace)\b\s+({{identifier}})'
      captures:
        1: storage.type.vala
        2: entity.name.namespace.vala
      push:
        - meta_scope: meta.namespace.vala
        - match: '{{identifier}}'
          scope: entity.name.namespace.vala
        - match: \.
          scope: punctuation.separator.vala
        - match: \{
          scope: punctuation.section.block.begin.vala
          set:
            - meta_scope: meta.namespace.vala meta.block.vala
            - match: \}
              scope: punctuation.section.block.end.vala
              pop: true
            - include: namespace_members

  namespace_members:
    - include: namespace_declarations
    - include: constant_declarations
    - include: field_declarations

  field_declarations:
    # field-declaration: [ access-modifier ] qualified-type-name field-name [ = expression ] ;
    - match: (?:\b({{access_modifier}})\b\s+)?\b(?:({{builtin_type}})|({{identifier}}))\b
      captures:
        1: storage.modifier.vala
        2: storage.type.vala
        3: support.type.vala
      push:
        # Catch the field-name.
        - match: '{{identifier}}'
          scope: variable.other.readwrite.vala
        # Set up rvalue to pop on terminator.
        - match: =
          scope: keyword.operator.assignment.vala
          set: rvalue_pop_on_terminator
        - match: \;
          scope: punctuation.terminator.vala
          pop: true

  constant_declarations:
    # constant-declaration: [ access-modifier ] const qualified-type-name constant-name = expression ;
    - match: (?:\b({{access_modifier}})\b\s+)?\b(const)\b\s+(?:({{builtin_type}})|({{namespace_identifier}}))\b
      captures:
        1: storage.modifier.vala
        2: storage.modifier.vala
        3: storage.type.vala
        4: support.type.vala
      push:
        # Catch the field-name.
        - match: '{{identifier}}'
          scope: variable.other.readwrite.vala
        # Set up rvalue to pop on terminator.
        - match: =
          scope: keyword.operator.assignment.vala
          set: rvalue_pop_on_terminator

  using_statement:
    # using namespace-list ;
    - match: \busing\b\s+
      scope: keyword.control.import.vala
      push:
        - match: \,
          scope: punctuation.separator.vala
        - match: '{{namespace_identifier}}'
          scope: support.type.vala
        - match: \;
          scope: punctuation.terminator.vala
          pop: true

  rvalue_pop_on_terminator:
    # Match an rvalue, then pop at the next semicolon.
    - match: \;
      scope: punctuation.terminator.vala
      pop: true
    - include: expressions